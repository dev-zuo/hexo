{"meta":{"title":"zuoxiaobai's blog","subtitle":"左小白的日常","description":"左小白","author":"zuoxiaobai","url":"http://zuoxiaobai.github.io"},"pages":[],"posts":[{"title":"小程序web-view组件内嵌网页调用微信JS-SDK","slug":"小程序web-view组件内嵌网页调用微信JS-SDK","date":"2018-02-24T07:41:00.000Z","updated":"2018-02-25T06:46:05.490Z","comments":true,"path":"2018/02/24/小程序web-view组件内嵌网页调用微信JS-SDK/","link":"","permalink":"http://zuoxiaobai.github.io/2018/02/24/小程序web-view组件内嵌网页调用微信JS-SDK/","excerpt":"","text":"小程序内嵌网页调用JSSDK与公众号网页里面调用基本一致，需要注意的地方： 内嵌网页调用JS-SDK需要使用公众号的appid及appsecret，与小程序的appid没有关系 小程序内嵌网页只支持部分JSSDK，详情参见： 小程序web-view组件 公众号需要将调用接口的域名加入JS接口安全域名，对应的ip加入ip白名单 这里以调用微信的扫一扫为例子，来体验整个流程，前端html：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;!-- 前端HTML --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;小程序内嵌网页调用扫一扫功能&lt;/title&gt; &lt;!-- weui样式 --&gt; &lt;link rel=\"stylesheet\" href=\"https://res.wx.qq.com/open/libs/weui/1.1.2/weui.min.css\"&gt; &lt;!-- 微信JS-SDK需要引入的js文件 --&gt; &lt;script type=\"text/javascript\" src=\"https://res.wx.qq.com/open/js/jweixin-1.3.0.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div style=\"margin:10%\"&gt; &lt;button class=\"weui-btn\" onclick=\"startScanning()\" style=\"background:#336699\"&gt; 调用扫一扫 &lt;/button&gt; &lt;/div&gt; &lt;script&gt; // 是否在小程序内部打开的网页 function isOpenInWechat() &#123; return (window.__wxjs_environment === 'miniprogram'); &#125; // 非小程序内部打开，提示错误 if (!isOpenInWechat()) &#123; alert('请在小程序里打开页面'); &#125; // 获取signature及对应的时间戳，随机字符串 var obj = getSignature(); // 权限验证 wx.config(&#123; debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。 appId: 'wx90aaf3035f813f5a', // 必填，公众号的唯一标识，此处填写企业号corpid timestamp: obj.timestamp, // 必填，生成签名的时间戳 nonceStr: obj.noncestr, // 必填，生成签名的随机串 signature: obj.signature,// 必填，签名，见附录1 jsApiList: ['chooseImage','scanQRCode'] // 必填，需要使用的JS接口列表 &#125;); // 请求后台接口，得到signature等 function getSignature() &#123; var res = null; // 自己封装的ajax函数，同步执行ajax，发送请求，后台去操作 ajax_request('GET', '/initialize', 'getSignature', &#123;&#125;, function(result)&#123; res = result; &#125;,'sync'); return res; &#125; // scan function startScanning() &#123; // 调用微信接口 wx.scanQRCode(&#123; needResult: 0, // 默认为0，扫描结果由微信处理，1则直接返回扫描结果， scanType: [\"qrCode\",\"barCode\"], // 可以指定扫二维码还是一维码，默认二者都有 success: function (res) &#123; var result = res.resultStr; // 当needResult 为 1 时，扫码返回的结果 &#125; &#125;); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;` 后台使用了nodejs+express，获取signature等信息12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970// 后台node代码// 发送get请求依赖var https = require('https');// SHA 加密var crypto = require('crypto');/** * signature 调用了initialize函数 * 调用微信的接口获取access_token及jsapi_ticket，生成signature。这里只是演示，没有缓存数据 * 注意调用接口有次数限制。获取access_token | 2000次/每天；获取jsapi_ticket | 1000000次/天 * 正式环境下业务量大就需要将access_token和jsapi_ticket存入缓存，一般有效期为7200秒。 */function initialize(app, data, req, res) &#123; // 获取access_token var url = 'https://api.weixin.qq.com/cgi-bin/token'; var appid = 'wx90aaf3035f813f5a'; var appsecret = '这里填公众号生成的appsecret'; var preRes = res; url += \"?grant_type=client_credential&amp;appid=\"+appid+\"&amp;secret=\"+appsecret; https.get(url, function(res) &#123; console.log(\"Got response: \" + res.statusCode); res.on('data', function (d) &#123; d = JSON.parse(d.toString()); console.log(d); var access_token = d.access_token; var ticketUrl = \"https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=\"; ticketUrl += access_token + \"&amp;type=jsapi\"; // 获取ticket https.get(ticketUrl, function (res) &#123; res.on('data', function (d) &#123; var d = JSON.parse(d.toString()); var jsapi_ticket = d.ticket; var timestamp = new Date().getTime(); // 获取随机字符串 // toString()默认是10进账，如果想包含字母，禁止要大于10 toString(32) // 0.66666666666xx =&gt; \"0.66666666666xx\" =&gt; \"66666666666xx\" var noncestr = Math.random().toString().substr(2); // 这里的url是调用接口时当前的url var url = 'https://zuo11.com/start'; var targetStr = \"jsapi_ticket=\" + jsapi_ticket + \"&amp;noncestr=\"+noncestr+ \"&amp;timestamp=\"+timestamp + \"&amp;url=\"+url; console.log(targetStr); // SHA1加密 var sha1_result = crypto.createHash('sha1').update(targetStr).digest('hex'); console.log(sha1_result); // 将获取到的signature一级对应的时间错，随机字符串返回给前端 preRes.json(&#123; 'signature': sha1_result, 'noncestr': noncestr, 'timestamp': timestamp &#125;) &#125;); &#125;).on('error', function(e) &#123; console.log(\"Got error: \" + e.message); &#125;); &#125;) &#125;).on('error', function(e) &#123; console.log(\"Got error: \" + e.message); &#125;);&#125; 官方文档：微信JS-SDK说明文档","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-02-24T07:35:00.418Z","updated":"2018-02-24T07:35:00.421Z","comments":true,"path":"2018/02/24/hello-world/","link":"","permalink":"http://zuoxiaobai.github.io/2018/02/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}