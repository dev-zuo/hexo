{"meta":{"title":"zuoxiaobai's blog","subtitle":"左小白","description":"左小白","author":"zuoxiaobai","url":"http://zuoxiaobai.github.io"},"pages":[{"title":"标签","date":"2018-02-26T01:37:51.000Z","updated":"2018-02-26T01:38:31.819Z","comments":true,"path":"tags/index.html","permalink":"http://zuoxiaobai.github.io/tags/index.html","excerpt":"","text":""},{"title":"关于我","date":"2018-02-26T01:43:40.000Z","updated":"2018-02-26T01:45:41.660Z","comments":true,"path":"about/index.html","permalink":"http://zuoxiaobai.github.io/about/index.html","excerpt":"","text":"左小白http://zuo11.comzuoguoqing@aliyun.com"},{"title":"分类","date":"2018-02-26T01:40:18.000Z","updated":"2018-02-26T01:40:51.755Z","comments":true,"path":"categories/index.html","permalink":"http://zuoxiaobai.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"向他人的项目提交代码及添加域名解析","slug":"向他人的项目提交代码及添加域名解析","date":"2018-03-04T13:49:39.000Z","updated":"2018-03-04T15:57:34.452Z","comments":true,"path":"2018/03/04/向他人的项目提交代码及添加域名解析/","link":"","permalink":"http://zuoxiaobai.github.io/2018/03/04/向他人的项目提交代码及添加域名解析/","excerpt":"向他人的项目提交代码在Github新建的仓库，如果是项目拥有者，进入项目，就会看到setting的入口，这个位置配置当前项目的一些信息，删除该仓库。如果想要其他的github用户可以把代码直接提交到该仓库，可以在这里把对应的用户名添加到合作者，collaborators下。添加后，对方需要同意，可以把链接发给对方。这样，其他账号就可以直接提交到项目了。使用hexo g 可直接提交生效。 将自己的域名解析到Github Pages如果希望当访问自己的域名时，自动跳转到xxx.github.io的页面，需要两步操作: 将域名解析到github的ip先通过ping自己的xxx.github.io的域名，得到对应的ip，再在域名的管理控制台，将域名解析到这个IP. 设置项目的Github Pages在项目的设置页面，Github Pages 里，可以看到Your site is published at https://xxx.github.io。在下面的Custom domain里面添加自己的域名，点击保存，就可以了。","text":"向他人的项目提交代码在Github新建的仓库，如果是项目拥有者，进入项目，就会看到setting的入口，这个位置配置当前项目的一些信息，删除该仓库。如果想要其他的github用户可以把代码直接提交到该仓库，可以在这里把对应的用户名添加到合作者，collaborators下。添加后，对方需要同意，可以把链接发给对方。这样，其他账号就可以直接提交到项目了。使用hexo g 可直接提交生效。 将自己的域名解析到Github Pages如果希望当访问自己的域名时，自动跳转到xxx.github.io的页面，需要两步操作: 将域名解析到github的ip先通过ping自己的xxx.github.io的域名，得到对应的ip，再在域名的管理控制台，将域名解析到这个IP. 设置项目的Github Pages在项目的设置页面，Github Pages 里，可以看到Your site is published at https://xxx.github.io。在下面的Custom domain里面添加自己的域名，点击保存，就可以了。 关于hexo d 后需要重新设置custom domain的问题设置自定义解析后，可以通过自己的域名访问对应的项目了，但写一篇文章后，hexo g 提交到仓库后，设置里面默认域名又变成xxx.github.io了，自定义域名的设置失效了。我们可以在hexo工程目录下的source目录下，新建一个名为CNAME的文件，里面写入自定义的域名。之后修改的每次提交就不会出现这种问题了。","categories":[{"name":"网站建设","slug":"网站建设","permalink":"http://zuoxiaobai.github.io/categories/网站建设/"}],"tags":[{"name":"Github","slug":"Github","permalink":"http://zuoxiaobai.github.io/tags/Github/"},{"name":"个人博客","slug":"个人博客","permalink":"http://zuoxiaobai.github.io/tags/个人博客/"}]},{"title":"使用Hexo搭建个人博客","slug":"使用Hexo搭建个人博客","date":"2018-02-26T07:19:27.000Z","updated":"2018-02-26T07:37:18.795Z","comments":true,"path":"2018/02/26/使用Hexo搭建个人博客/","link":"","permalink":"http://zuoxiaobai.github.io/2018/02/26/使用Hexo搭建个人博客/","excerpt":"用Github Pages弄了一个简单的页面后，琢磨着用Hexo来搭一个博客。把大致的过程梳理了一下。首先百度了Hexo，找到了Hexo的中文文档，由于之前没接触过，就按着流程一步步来了。 先安装Hexo，之前已经安装了node 及 git，直接用npm装，全局安装1$ npm install -g hexo-cli 创建一个hexo项目, testHexo123456// 初始化项目，会在当前目录下创建一个testHexo目录，生成标准的项目结构文件$ hexo init testHexo// 进入对应的目录$ cd testHexo// 安装项目依赖的一些包$ npm install 生成的目录结构如下1234567├── _config.yml // 网站的配置信息，您可以在此配置大部分的参数。如标题、语言、git信息，主题等├── package.json // 应用程序信息，需要安装的一些npm包信息├── scaffolds // 模板文件夹，当写文章时，每次new的文章使用的就是里面的模板├── source // 资源文件夹| ├── _drafts // 存放草稿目录，我在mac下，初始化没有生成这个目录，可以手动mkdir一个| └── _posts // 存放文章的目录，一般是.md格式的文章，展示的核心内容└── themes // 主题 文件夹。Hexo 会根据主题来生成静态页面。","text":"用Github Pages弄了一个简单的页面后，琢磨着用Hexo来搭一个博客。把大致的过程梳理了一下。首先百度了Hexo，找到了Hexo的中文文档，由于之前没接触过，就按着流程一步步来了。 先安装Hexo，之前已经安装了node 及 git，直接用npm装，全局安装1$ npm install -g hexo-cli 创建一个hexo项目, testHexo123456// 初始化项目，会在当前目录下创建一个testHexo目录，生成标准的项目结构文件$ hexo init testHexo// 进入对应的目录$ cd testHexo// 安装项目依赖的一些包$ npm install 生成的目录结构如下1234567├── _config.yml // 网站的配置信息，您可以在此配置大部分的参数。如标题、语言、git信息，主题等├── package.json // 应用程序信息，需要安装的一些npm包信息├── scaffolds // 模板文件夹，当写文章时，每次new的文章使用的就是里面的模板├── source // 资源文件夹| ├── _drafts // 存放草稿目录，我在mac下，初始化没有生成这个目录，可以手动mkdir一个| └── _posts // 存放文章的目录，一般是.md格式的文章，展示的核心内容└── themes // 主题 文件夹。Hexo 会根据主题来生成静态页面。 运行初始化项目123$ hexo generate // 根据配置，生成静态的项目文件，可简写为 hexo g$ hexo server // 启动服务器。默认情况下，访问网址为： http://localhost:4000/。// 访问http://localhost:4000/就可以看到Hexo默认的主题了。只有一篇hello world的文章。 写博客文章 用hex new 写文章后，再运行hexo g;hexo server 就可以看到新的文章了1234567891011121314151617// 新建一篇文章$ hexo new 文章标题 // 可以指定使用的模板布局 hexo new [layout] 文章标题// 默认会使用scaffolds目录下的post.md模板在source/_posts目录下生成对应的md文件// 后面新建分类页和标签页时会使用 pages布局 hexo new page tags// 打开生成的文件，按照md语法写内容就可以了。最上面用--- ---包含的内容为Front-matter// 用来修改标题、时间、标签、分类等// 例子:---title: 用Github的Pages功能创建静态个人网站date: 2018-02-25 14:57:10categories:- 其他tags:- Github- 个人博客--- 使用主题(themes) – 不需要样式美化可跳过这一步，直接看后面的项目部署页面默认的风格很单一，Hexo有很多主题可以使用，有哪些好看的 Hexo 主题？- 知乎我选了star最多的next主题 iissnan/hexo-theme-next · GitHub找到了一个比较易懂的中文文档: 开始使用 - NexT 使用文档修改网页的标题、下载主题后使用1234567// 下载next主题到项目的themes/next目录 $ git clone https://github.com/iissnan/hexo-theme-next themes/next// 修改项目目录下_config.yml文件，使用next主题theme: next// 重新生成一下，hexo g; hexo server 运行项目，就可以看到next主题的效果了 对主题的一些细节进行配置、修改1234567891011121314151617181920// 如果是英文，需要在项目目录下的_config.yml里做修改，注意不是next主题目录下的_config.ymllanguage: zh-Hans// 下面修改的配置是修改的next目录下的_config.yml// 修改主题, next有几种主题，我这里选的是Pisces主题scheme: Pisces// 生成关于、分类、标签页面，默认都是404的$ hexo new page about // 这里的内容需要自己写$ hexo new page categories // 会更具写文章时对应的categories来自动载入$ hexo new page tags // 会更具写文章时对应的tags来自动载入// 使用评论系统 disqus（需要翻墙），先去官方申请一个账号或使用google账号登录// 登录后 选择 I want to install Disqus on my site，填网站名称等信息就会生成对应的shortname# Disqusdisqus: enable: true shortname: zuoxiaobais-blog // 这里填对应的网站shortname count: true// 使用 hexo g;hexo server 重新生成运行项目就可以看到效果了。 部署代码到zuoxiaobai.github.io123456789101112131415// 每次修改配置，或写文章后都需要重新生成静态文件$ hexo g // 配置部署到github，修改项目目录下的_config.yml文件deploy: type: git repo: git@github.com:zuoxiaobai/zuoxiaobai.github.io.git // 这里填仓库（Repository）地址 branch: master message: update note // commit信息, 默认为 Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;// 部署$ hexo deploy // 简写为 hexo d // 看到INFO Deploy done: git 信息就是部署OK了// 通过zuoxiaobai.github.io就可以看到最新改动的内容了","categories":[{"name":"网站建设","slug":"网站建设","permalink":"http://zuoxiaobai.github.io/categories/网站建设/"}],"tags":[{"name":"Github","slug":"Github","permalink":"http://zuoxiaobai.github.io/tags/Github/"},{"name":"个人博客","slug":"个人博客","permalink":"http://zuoxiaobai.github.io/tags/个人博客/"}]},{"title":"用Github的Pages功能创建静态个人网站","slug":"用Github的Pages功能创建静态个人网站","date":"2018-02-25T06:57:10.000Z","updated":"2018-02-26T07:39:03.658Z","comments":true,"path":"2018/02/25/用Github的Pages功能创建静态个人网站/","link":"","permalink":"http://zuoxiaobai.github.io/2018/02/25/用Github的Pages功能创建静态个人网站/","excerpt":"","text":"本文根据官方文档 Github Pages 整理通过Github Pages这个功能，我们可以创建一个开源的静态个人网站，通过xxx.github.io 可以访问.示例页面 https://zuoxiaobai.github.io 第一步: 创建一个仓库(repository)仓库的名字必须是username.github.io, 这里的username必须是Github的用户名，我的是 zuoxiaobai.github.io 第二步: 直接在该项目新建index.html这里上面的教程基本都是先将代码clone到本地，创建index.html再push change，最简单粗暴的方式就是直接在github图形化界面上创建index.html，输入内容 hello world, 访问username.github.io就可以看到hello world了。 后续开发可以用webstorm将代码拉取到本地再修改对应的代码，就可以丰富页面了，可以使用hexo等框架","categories":[{"name":"网站建设","slug":"网站建设","permalink":"http://zuoxiaobai.github.io/categories/网站建设/"}],"tags":[{"name":"Github","slug":"Github","permalink":"http://zuoxiaobai.github.io/tags/Github/"},{"name":"个人博客","slug":"个人博客","permalink":"http://zuoxiaobai.github.io/tags/个人博客/"}]},{"title":"小程序web-view组件内嵌网页调用微信JS-SDK","slug":"小程序web-view组件内嵌网页调用微信JS-SDK","date":"2018-02-24T07:41:00.000Z","updated":"2018-02-26T07:41:44.082Z","comments":true,"path":"2018/02/24/小程序web-view组件内嵌网页调用微信JS-SDK/","link":"","permalink":"http://zuoxiaobai.github.io/2018/02/24/小程序web-view组件内嵌网页调用微信JS-SDK/","excerpt":"小程序内嵌网页调用JSSDK与公众号网页里面调用基本一致，需要注意的地方： 内嵌网页调用JS-SDK需要使用公众号的appid及appsecret，与小程序的appid没有关系 小程序内嵌网页只支持部分JSSDK，详情参见： 小程序web-view组件 公众号需要将调用接口的域名加入JS接口安全域名，对应的ip加入ip白名单","text":"小程序内嵌网页调用JSSDK与公众号网页里面调用基本一致，需要注意的地方： 内嵌网页调用JS-SDK需要使用公众号的appid及appsecret，与小程序的appid没有关系 小程序内嵌网页只支持部分JSSDK，详情参见： 小程序web-view组件 公众号需要将调用接口的域名加入JS接口安全域名，对应的ip加入ip白名单 这里以调用微信的扫一扫为例子，来体验整个流程，前端html：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;!-- 前端HTML --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;小程序内嵌网页调用扫一扫功能&lt;/title&gt; &lt;!-- weui样式 --&gt; &lt;link rel=\"stylesheet\" href=\"https://res.wx.qq.com/open/libs/weui/1.1.2/weui.min.css\"&gt; &lt;!-- 微信JS-SDK需要引入的js文件 --&gt; &lt;script type=\"text/javascript\" src=\"https://res.wx.qq.com/open/js/jweixin-1.3.0.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div style=\"margin:10%\"&gt; &lt;button class=\"weui-btn\" onclick=\"startScanning()\" style=\"background:#336699\"&gt; 调用扫一扫 &lt;/button&gt; &lt;/div&gt; &lt;script&gt; // 是否在小程序内部打开的网页 function isOpenInWechat() &#123; return (window.__wxjs_environment === 'miniprogram'); &#125; // 非小程序内部打开，提示错误 if (!isOpenInWechat()) &#123; alert('请在小程序里打开页面'); &#125; // 获取signature及对应的时间戳，随机字符串 var obj = getSignature(); // 权限验证 wx.config(&#123; debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。 appId: 'wx90aaf3035f813f5a', // 必填，公众号的唯一标识，此处填写企业号corpid timestamp: obj.timestamp, // 必填，生成签名的时间戳 nonceStr: obj.noncestr, // 必填，生成签名的随机串 signature: obj.signature,// 必填，签名，见附录1 jsApiList: ['chooseImage','scanQRCode'] // 必填，需要使用的JS接口列表 &#125;); // 请求后台接口，得到signature等 function getSignature() &#123; var res = null; // 自己封装的ajax函数，同步执行ajax，发送请求，后台去操作 ajax_request('GET', '/initialize', 'getSignature', &#123;&#125;, function(result)&#123; res = result; &#125;,'sync'); return res; &#125; // scan function startScanning() &#123; // 调用微信接口 wx.scanQRCode(&#123; needResult: 0, // 默认为0，扫描结果由微信处理，1则直接返回扫描结果， scanType: [\"qrCode\",\"barCode\"], // 可以指定扫二维码还是一维码，默认二者都有 success: function (res) &#123; var result = res.resultStr; // 当needResult 为 1 时，扫码返回的结果 &#125; &#125;); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;` 后台使用了nodejs+express，获取signature等信息12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970// 后台node代码// 发送get请求依赖var https = require('https');// SHA 加密var crypto = require('crypto');/** * signature 调用了initialize函数 * 调用微信的接口获取access_token及jsapi_ticket，生成signature。这里只是演示，没有缓存数据 * 注意调用接口有次数限制。获取access_token | 2000次/每天；获取jsapi_ticket | 1000000次/天 * 正式环境下业务量大就需要将access_token和jsapi_ticket存入缓存，一般有效期为7200秒。 */function initialize(app, data, req, res) &#123; // 获取access_token var url = 'https://api.weixin.qq.com/cgi-bin/token'; var appid = 'wx90aaf3035f813f5a'; var appsecret = '这里填公众号生成的appsecret'; var preRes = res; url += \"?grant_type=client_credential&amp;appid=\"+appid+\"&amp;secret=\"+appsecret; https.get(url, function(res) &#123; console.log(\"Got response: \" + res.statusCode); res.on('data', function (d) &#123; d = JSON.parse(d.toString()); console.log(d); var access_token = d.access_token; var ticketUrl = \"https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=\"; ticketUrl += access_token + \"&amp;type=jsapi\"; // 获取ticket https.get(ticketUrl, function (res) &#123; res.on('data', function (d) &#123; var d = JSON.parse(d.toString()); var jsapi_ticket = d.ticket; var timestamp = new Date().getTime(); // 获取随机字符串 // toString()默认是10进账，如果想包含字母，禁止要大于10 toString(32) // 0.66666666666xx =&gt; \"0.66666666666xx\" =&gt; \"66666666666xx\" var noncestr = Math.random().toString().substr(2); // 这里的url是调用接口时当前的url var url = 'https://zuo11.com/start'; var targetStr = \"jsapi_ticket=\" + jsapi_ticket + \"&amp;noncestr=\"+noncestr+ \"&amp;timestamp=\"+timestamp + \"&amp;url=\"+url; console.log(targetStr); // SHA1加密 var sha1_result = crypto.createHash('sha1').update(targetStr).digest('hex'); console.log(sha1_result); // 将获取到的signature一级对应的时间错，随机字符串返回给前端 preRes.json(&#123; 'signature': sha1_result, 'noncestr': noncestr, 'timestamp': timestamp &#125;) &#125;); &#125;).on('error', function(e) &#123; console.log(\"Got error: \" + e.message); &#125;); &#125;) &#125;).on('error', function(e) &#123; console.log(\"Got error: \" + e.message); &#125;);&#125; 官方文档：微信JS-SDK说明文档","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://zuoxiaobai.github.io/categories/微信小程序/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"http://zuoxiaobai.github.io/tags/小程序/"},{"name":"微信JSSDK","slug":"微信JSSDK","permalink":"http://zuoxiaobai.github.io/tags/微信JSSDK/"}]}]}